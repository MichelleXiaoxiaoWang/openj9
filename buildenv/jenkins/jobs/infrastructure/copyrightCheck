/*******************************************************************************
 * Copyright (c) 2017, 2018 IBM Corp. and others
 *
 * This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License 2.0 which accompanies this
 * distribution and is available at https://www.eclipse.org/legal/epl-2.0/
 * or the Apache License, Version 2.0 which accompanies this distribution and
 * is available at https://www.apache.org/licenses/LICENSE-2.0.
 *
 * This Source Code may also be made available under the following
 * Secondary Licenses when the conditions for such availability set
 * forth in the Eclipse Public License, v. 2.0 are satisfied: GNU
 * General Public License, version 2 with the GNU Classpath
 * Exception [1] and GNU General Public License, version 2 with the
 * OpenJDK Assembly Exception [2].
 *
 * [1] https://www.gnu.org/software/classpath/license.html
 * [2] http://openjdk.java.net/legal/assembly-exception.html
 *
 * SPDX-License-Identifier: EPL-2.0 OR Apache-2.0 OR GPL-2.0 WITH Classpath-exception-2.0 OR LicenseRef-GPL-2.0 WITH Assembly-exception
 *******************************************************************************/

def FAIL = false
def SRC_REPO = 'https://github.com/${ghprbGhRepository}.git'
def BAD_FILES = []
def HASHES = '###################################'
def REGEXLIST = []
def FILES = []
def white = []
def ignorefile = "${env.WORKSPACE}/.copyrightignore"

timeout(time: 6, unit: 'HOURS') {
    stage('Copyright Check') {
        node ('worker') {
            timestamps {
                git url: SRC_REPO
                sh "git fetch --tags --progress origin +refs/pull/*:refs/remotes/origin/pr/*"
                sh "git checkout --detach ${sha1}"
                sh 'git fetch origin'
                FILES = sh (
                    script: "git diff -C --diff-filter=ACM --name-only origin/${ghprbTargetBranch} HEAD",
                    returnStdout: true
                ).trim()
                echo FILES
                if (FILES == "") {
                    echo "There are no files to check for copyrights"
                } else {
                    def FILES_LIST = FILES.split("\\r?\\n")
                    DATE_YEAR = sh (
                        script: "date +%Y",
                        returnStdout: true
                    ).trim()

                    // Set a different Copyright regex depending on the Repo the PR is from
                    if (ghprbGhRepository ==~ "eclipse.*") {
                        REGEX = "\'Copyright \\(c\\) ([0-9]{4}), ${DATE_YEAR}\'"
                    } else if (ghprbGhRepository ==~ "ibmruntimes.*") {
                        REGEX = "\'\\(c\\) Copyright IBM Corp. ([0-9]{4}), ${DATE_YEAR} All Rights Reserved\'"
                    } else {
                        echo "ERROR: Unrecognized repository. Unable to determine correct Copyright regex"
                        sh 'exit 1'
                    }

                    if (fileExists("${env.WORKSPACE}/.copyrightignore")) {
                        def readinFiles = readFile("${env.WORKSPACE}/.copyrightignore")
                        def READLIST = readinFiles.split("\\r?\\n")
                        for (item in READLIST) {
                             regexsElm = item

                             if (item.contains("#")) {
                                 def location = regexsElm.indexOf("#")
                                 regexsElm = regexsElm.substring(0,location)
                             }

                             if (regexsElm != "") {
                                 if (item.contains("*")) {
                                     regexsElm = regexsElm.replaceAll(/[*]/, /\.\*/)
                                 }

                                 if (item.startsWith("/") && item.lastIndexOf("/")==0 ) {
                                     regexsElm = regexsElm.replaceAll("[/]","");
                                     if (item.contains("*.")) {
                                         regexsElm = regexsElm.replaceAll("[*]","");
                                         regexsElm =  "[A-Za-z0-9[^/]+]+" + regexsElm
                                     }

                                     if (!item.contains(".")){
                                         regexsElm = regexsElm + /\// + ".*" + /|$/
                                     }

                                 } else if (!item.startsWith("/") && item.lastIndexOf("/")!=0 && item.contains("/")){
                                   regexsElm = regexsElm.replaceAll(/\//,/\/+/)
                                   if (!item.contains(".")){
                                         regexsElm = regexsElm + ".*"
                                   }
                                 } else {
                                   regexsElm = regexsElm.replaceAll("[/]","");
                                 }
                            }
                            if (regexsElm.contains ("/+.*.*")) {
                                regexsElm = regexsElm.replace("/+.*.*","/*.*.*");
                            }
                            
                            if (regexsElm ==~ /.*.[A-Za-z0-9]/){
                                print regexsElm;
                                regexsElm = regexsElm.substring(0, regexsElm.lastIndexOf(".")) + /\./ + regexsElm.substring(regexsElm.lastIndexOf(".") + 1);                           
                            }
                            
                            REGEXLIST << regexsElm
                        }
                        print REGEXLIST
                        FILES_LIST.each { fileName ->
                           for (regex in REGEXLIST) {
                                if (fileName ==~ /${regex}/) {
                                    FILES_LIST = FILES_LIST.collect { it.toString() } - "${fileName}"
                                    echo "Ignoring File: '${fileName}', appears to be in WHITELIST, matching " + /${regex}/
                                    break
                                }
                            }
                        }
                    }

                    FILES_LIST.each { file ->
                        echo "Checking file: '${file}'"
                        RESULT = sh (
                              script: "grep -qE ${REGEX} '${file}'",
                              returnStatus: true)
                        if (RESULT != 0) {
                            BAD_FILES << "${file}"
                            echo "FAILURE - Copyright date in file: '${file}' appears to be incorrect"
                            FAIL = true
                        } else {
                          echo "Copyright date in file: appears to be correct"
                        }
                    }

                    if (FAIL) {
                        echo "${HASHES}"
                        echo "The following files were modified and have incorrect copyrights"
                        BAD_FILES.each {file ->
                            echo "${file}"
                        }
                        echo "${HASHES}"
                        sh 'exit 1'
                    } else {
                        echo "All modified files appear to have correct copyrights"
                    }
                }
            }
        }
    }
}
